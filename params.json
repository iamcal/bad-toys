{"google":"","note":"Don't delete this file! It's used internally to help with page regeneration.","name":"Bad-toys","tagline":"Capture client-side Javascript errors in the wild","body":"# bad-toys - capture client-side Javascript errors in the wild\r\n\r\n## Logging browser errors\r\n\r\nFor some background:\r\n* http://errorception.com/\r\n* http://blog.pamelafox.org/2011/10/client-side-error-logging.html\r\n* https://gist.github.com/1878283\r\n* http://blog.protonet.info/post/9620971736/exception-notifier-javascript\r\n\r\nErrorception is a great tool, but with some downsides. It relies on a third party,\r\nyou can't export your logs and while it's fast, it's slower than it needs to be. It\r\nuses an async script load just like Google Analytics, mainly so that they can change\r\nthe error processing code without users having to update the embedded JS. This is\r\nnot needed if you control all the code yourself.\r\n\r\nRather than going for the post-load async script loading, I've taken the approach of\r\njust inlining the error capturing code completely. By putting the filtering work on \r\nthe server side, we can get the entire code down to under 500 bytes, including \r\ndelaying error processing until after page load.\r\n\r\n## Usage\r\n\r\nCopy and paste the contents of `badtoys.js` into a `<script>` tag _before_\r\nany other scripts on your page. You can use Google's Closure Compile to make it small:\r\n\r\n* http://closure-compiler.appspot.com/home\r\n\r\nYou will need to modify the storage function to post data to your own collection\r\nendpoint (instead of `/jse/`). `capture.php` gives a simple example that logs the \r\ninformation from the browser adding some environment info (time, IP, User Agent) \r\nand cookie info. This is a good place to implement filtering for events you know \r\nyou wont ever care about (like Facebook or Twitter widgets). You can easily port \r\nthis to your own language or framework.\r\n\r\nThe webapp inside `www/` is for analysing and browsing the errors. It is a work in\r\nprogress.\r\n\r\n\r\n## Browser documentation\r\n\r\n* Gecko: https://developer.mozilla.org/en/DOM/window.onerror\r\n* Opera: http://dev.opera.com/articles/view/better-error-handling-with-window-onerror/\r\n* W3C: http://www.w3.org/wiki/DOM/window.onerror\r\n* IE: http://msdn.microsoft.com/en-us/library/ie/cc197053(v=vs.85).aspx\r\n"}